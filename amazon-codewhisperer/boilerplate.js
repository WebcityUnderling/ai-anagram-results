import Head from 'next/head'
import { useState } from 'react'

// Anagram puzzle game

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
  }
  return array
} //fom stack overflow

function addToGuess(guess, letter) {
  
}

function clearGuess(guess) {
  
}

function findGuessInAnswers(guess, answers) {
  
}

function cheatGuess(answers, found) {
  //find the first answer that is not in found answers

}

export const getStaticProps = async ({ }) => {
  const loadPuzzle = await import('@/puzzles/climate.json')
  const word = shuffleArray(loadPuzzle.puzzle_word_array);
  const answers = shuffleArray(loadPuzzle.puzzle_answers);
  return { props: { word, answers } }
}

export default function Home({word, answers}) {
  //reactive guess

  //reactive tiles

  //reactive found answers

  //reactive answer not found

  //reactive answer already found
  
  const handleGuess = async () => {
    //find if guess is in answers array
 

    //answer is found, and answer is not already in found answers
    if (answerFound && !foundAnswers.includes(answerFound)) {
      //add answer to found answers
    }
    else if (answerFound && foundAnswers.includes(answerFound)) {
      //answer already found
    }
    else if (!answerFound) {
      //answer not found
    }
    //clear guess
  }
  
  const handleCheatGuess = async () => {
    const cheatFound = await cheatGuess(answers, foundAnswers);
    // add cheatfound to found answer
  }

  const handleShuffleTiles = () => {
    
  }

  const handleAnswerNotFound = () => {
    setAnswerNotFound(true);
    //set timeout to return answer not found to false after 1 second
    
  }

  const handleAnswerAlreadyFound = () => {
    setAnswerAlreadyFound(true);
    //set timeout to return answer already found to false after 1 second
    
  }

  return (
    <>
      <Head>
        <title>Anagram Puzzle Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div className="puzzle">
          <div class="messages">
            {/* if there and unfound answers, display how many are yet to be found */}

            {/* if all answers have been found, display congrats message  */}
          </div>
          <div className="guess">
            <div className='guess-letters'>
              <p className="letter">{guess}</p>
            </div>
            <div className='guess-status'>
              {/* if answer not found, display message  */}

              {/* if answer already found, display message   */}
              
            </div>
          </div>

          { foundAnswers.length < answers.length && 
            <div className="letters">
              {/*  Map array of tiles to buttons with listner on click to add tile value to guess */}
              
            </div>
          }

          {foundAnswers.length < answers.length && 
            <div className='actions'>
              {/* button that check if guess in contained in answers array */}
              
              
              {/* button that clears current guess */}
              
              
              {/* button that shuffles tiles */}
              
              
              {/* button that cheats and returns first answer not in found answers */}
                      
            </div>
          }

          <div className="answers">
            <ul>
              {/* map the array of answers to list items in unordered list  */}
              
            </ul>
          </div>
        </div>
        
      </main>
    </>
  )
}
