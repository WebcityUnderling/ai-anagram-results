import Head from 'next/head'
import { useState } from 'react'

// Anagram puzzle game

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
  }
  return array
} //fom stack overflow

function addToGuess(guess, letter) {
  return guess + letter // generated based on function name/params
}

function clearGuess(guess) {
  return '';
  
}

function findGuessInAnswers(guess, answers) {
  //find if guess is in answers array
  const foundAnswer = answers.find((answer) => answer.toLowerCase() === guess.toLowerCase()); // generated based on function name/params
  return foundAnswer;
}

function cheatGuess(answers, found) {
  //find the first answer that is not in found answers
  const cheatFound = answers.find((answer) => !found.includes(answer));
  return cheatFound;

}

export const getStaticProps = async ({ }) => {
  const loadPuzzle = await import('@/puzzles/climate.json')
  const word = shuffleArray(loadPuzzle.puzzle_word_array);
  const answers = shuffleArray(loadPuzzle.puzzle_answers);
  return { props: { word, answers } }
}

export default function Home({word, answers}) {
  //reactive guess
  const [guess, setGuess] = useState('');

  //reactive tiles
  const  [tiles, setTiles] = useState(word);

  //reactive found answers
  const [foundAnswers, setFoundAnswers] = useState([]);

  //reactive answer not found
  const [answerNotFound, setAnswerNotFound] = useState(false);

  //reactive answer already found
  const [answerAlreadyFound, setAnswerAlreadyFound] = useState(false);
  
  const handleGuess = async () => {
    //find if guess is in answers array
    const answerFound = await findGuessInAnswers(guess, answers);
    // //if answer is found, add answer to found answers
    // if (answerFound) {
    //   //add answer to found answers
    // } Extra provided

    //answer is found, and answer is not already in found answers
    if (answerFound && !foundAnswers.includes(answerFound)) {
      //add answer to found answers
      setFoundAnswers([...foundAnswers, answerFound]);
    }
    else if (answerFound && foundAnswers.includes(answerFound)) {
      //answer already found
      handleAnswerAlreadyFound(); //had to start writing funcitonname
    }
    else if (!answerFound) {
      //answer not found
      handleAnswerNotFound();
    }
    //clear guess
    setGuess(clearGuess(guess));
  }
  
  const handleCheatGuess = async () => {
    const cheatFound = await cheatGuess(answers, foundAnswers);
    // add cheatfound to found answer
    setFoundAnswers([...foundAnswers, cheatFound]);
  }

  const handleShuffleTiles = () => {
    //shuffle tiles
    // setTiles(shuffleArray(tiles)); This Answer is WRONG, Array needs to be spread
    setTiles([...shuffleArray(tiles)]); //it got is second try
  }

  const handleAnswerNotFound = () => {
    setAnswerNotFound(true);
    //set timeout to return answer not found to false after 1 second
    setTimeout(() => {
      setAnswerNotFound(false);
    },1000) //AI needed help through this prompt
    
  }

  const handleAnswerAlreadyFound = () => {
    setAnswerAlreadyFound(true);
    //set timeout to return answer already found to false after 1 second
    setTimeout(() => {
      setAnswerAlreadyFound(false);
    },1000) //AI needed help through this prompt
  }

  return (
    <>
      <Head>
        <title>Anagram Puzzle Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div className="puzzle">
          <div className="messages">
            {/* if there and unfound answers, display how many are yet to be found */}
            { foundAnswers.length < answers.length && 
              <p>
                {answers.length - foundAnswers.length} answers left
              </p>
            }
            {/* if all answers have been found, display congrats message  */}
            { foundAnswers.length === answers.length && 
              <p>
                Congratulations! You found all the answers!
              </p>
            }
          </div>
          <div className="guess">
            <div className='guess-letters'>
              <p className="letter">{guess}</p>
            </div>
            <div className='guess-status'>
              {/* if answer not found, display message  */}
              { answerNotFound && 
                <p>
                  Answer not found!
                </p>
              }

              {/* if answer already found, display message   */}
              {  answerAlreadyFound && 
                <p>
                  Answer already found!
                </p>
              }
              
            </div>
          </div>

          { foundAnswers.length < answers.length && 
            <div className="letters">
              {/*  Map array of tiles to buttons with listner on click to add tile value to guess */}
              { tiles.map((tile) => (
                <button 
                  key={tile}
                  onClick={() => setGuess(addToGuess(guess, tile))}
                >
                  {tile}
                </button>
              ))}
            </div>
          }

          {foundAnswers.length < answers.length && 
            <div className='actions'>
              {/* button that check if guess in contained in answers array */}
              <button onClick={handleGuess}>Try</button>
              
              {/* button that clears current guess */}
              <button onClick={() => setGuess(clearGuess(guess))}>Clear</button>
              
              
              {/* button that shuffles tiles */}
              <button onClick={handleShuffleTiles}>Shuffle</button>
              
              
              {/* button that cheats and returns first answer not in found answers */}
              <button onClick={handleCheatGuess}>Cheat</button>
                      
            </div>
          }

          <div className="answers">
            <ul>
              {/* map the array of answers to list items in unordered list  */}
              {foundAnswers.map((foundAnswer) => (
                <li key={foundAnswer}>{foundAnswer}</li>
              ))}
            </ul>
          </div>
        </div>
        
      </main>
    </>
  )
}
